// based on hugo-prose: https://github.com/yihui/hugo-prose/blob/16e041908e4d6a59e5c866d641d4787de88ec9b8/static/js/features.js

window.addEventListener('DOMContentLoaded', function(event) {
  var d = document;

  var removeEl = function(el) {
    if (!el) return;
    el.remove ? el.remove() : el.parentNode.removeChild(el);
  };

  var insertAfter = function(target, sib) {
    target.after ? target.after(sib) : (
      target.parentNode.insertBefore(sib, target.nextSibling)
    );
  };
  var insertBefore = function(target, sib) {
    target.before ? target.before(sib) : (
      target.parentNode.insertBefore(sib, target)
    );
  };

  // <a><b>c</b></a> -> <b><a>c</a></b>
  var insideOut = function(el) {
    var p = el.parentNode, x = el.innerHTML,
      c = document.createElement('div');  // a tmp container
    insertAfter(p, c);
    c.appendChild(el);
    el.innerHTML = '';
    el.appendChild(p);
    p.innerHTML = x;  // let the original parent have the content of its child
    insertAfter(c, c.firstElementChild);
    removeEl(c);
  }

  var i, a, s;

  // process single articles
  var article = d.querySelector('main .article');
  if (!article) article = d.createElement('div');

  // move <figcaption> out of <figure> (and p.caption out of div.figure) so that <figure> can scroll
  d.querySelectorAll('.fullscroll figure > figcaption, .fullscroll .figure > .caption').forEach(function(el) {
    insertAfter(el.parentNode, el);
  });

  // move footnotes and citations to sidenotes
  if (true) {
    d.querySelectorAll('.footnotes > ol > li[id^="fn"], #refs > div[id^="ref-"]').forEach(function(fn) {
      a = d.querySelectorAll('a[href="#' + fn.id + '"]');  // <a> that points to note id in body
      if (a.length === 0) return;
      a.forEach(function(el) {
        el.removeAttribute('href');
        el.innerHTML = '<label class="footnote-label" for="footnote-toggle-' + fn.id + '">' + el.innerHTML + '</label>';
      });
      a = a[0];

      s = d.createElement('div');  // insert a side div next to n in body
      s.className = 'side';
      if (/^fn/.test(fn.id)) {
        s.innerHTML = fn.innerHTML;
        var n = a.innerText;   // footnote number
        s.firstElementChild.innerHTML = '<span class="bg-number">' + n +
          '</span> ' + s.firstElementChild.innerHTML;
        removeEl(s.querySelector('a[href^="#fnref"]'));  // remove backreference
        a.parentNode.tagName === 'SUP' && insideOut(a);
      } else {
        s.innerHTML = fn.outerHTML;
        a = a.parentNode;
      }

      // insert a checkbox for toggle
      const checkbox = d.createElement('input');
      checkbox.setAttribute('type', 'checkbox');
      checkbox.className = 'footnote-toggle';
      checkbox.id = "footnote-toggle-" + fn.id;
      insertBefore(a, checkbox);

      // insert note after the <sup> or <span> that contains a
      insertAfter(a, s);
      a.classList.add('note-ref');
      removeEl(fn);
    });
    // remove the footnote/citation section if it's empty now
    d.querySelectorAll('.footnotes, #refs').forEach(function(fn) {
      var items = fn.children;
      if (fn.id === 'refs') return items.length === 0 && removeEl(fn);
      // there must be a <hr> and an <ol> left
      if (items.length !== 2 || items[0].tagName !== 'HR' || items[1].tagName !== 'OL') return;
      items[1].childElementCount === 0 && removeEl(fn);
    });
  }
});
